##########################################################
Pre-processing of ancillary data for soil moisture priors
##########################################################

.. contents:: :depth: 2

Introduction
=============
The prior models developed within the MULTIPLY framework require ancillary data to provide valuable preliminary knowledge to the process of inferring land surface parameters. This section deals with the data sets supporting the retrieval of soil moisture information from *Sentinel-1* microwave data.
In this process soil moisture climatology data is used as prior to get a general idea of amplitude, variability and seasonal behaviour of the in situ soil moisture.
In addition, an *Antecedent Precipitation Index* derived from current satellite and radar data will account for temporal high-resolution wetness information.
Furthermore, statistical and deterministic priors will be implemented to define general constraints regarding the soil moisture inference.
This summary only lists the ancillary data already used in the prototype software or at this stage envisaged to be integrated.

Utilized Tools
================
The data was retrieved and processed with the following tools:

* **wget**: downloading satellite data
* **python**: download automation, process downloaded data (i.a. *geoval* module)
* **ncks** process downloaded data
* **cdo**: altering, merging of netcdfs
* **ncl**: conversion of HDF5 data to NetCDF


Input Data Sets
===============

Input Data for the Climatological Prior
-------------------------------------------

The climatological soil moisture data is derived from the `ESA CCI soilmoisture product <http://www.esa-soilmoisture-cci.org/node/93>`_ which is the result from aggregating data from six active and passive satellite sensors over the period 1979 to 2010. "The Soil Moisture CCI project is part of the ESA Programme on Global Monitoring of Essential Climate Variables (ECV), better known as the Climate Change Initiative (CCI), initiated in 2010 for a period
of 6 years" [#]_.


Input Data for the Prior based on Antecedent Precipitation Index (API)
-------------------------------------------------------------------------
For the API based prior generation further comparison of the data sets listed below and possible data storage/management decisions have to made to determine which data sets are going to be used in this module.


Satellite Data
................
To account for high spatial as well as temporal resolution and to assure the final software package to be future-proof the half hourly data sets from the 'Global Precipitation Mission' (GPM) are a viable option. The *IMERG* data provides rainfall estimates which result from combining data from all passive-microwave instruments in the GPM constellation.
  
    'This algorithm is intended to intercalibrate, merge, and interpolate “all” satellite microwave precipitation estimates, together with microwave-calibrated infrared (IR) satellite estimates, precipitation gauge analyses, and potentially other precipitation estimators at fine time and space scales for the TRMM and GPM eras over the entire globe. The system is run several times for each observation time, first giving a quick estimate and successively providing better estimates as more data arrive. The final step uses monthly gauge data to create research-level products.' [#]_

Following data sets are to be used in the platform:

  + GPM 3IMERGHH_04 half hour final run

    + 0.1° - 30 minute  Gridded,
    + 60°N-60°S,
    + March 2014 to present
    + delay 4 months (research / final run)

  + GPM 3IMERGDF_04 daily final

    + 0.1° - 1 Day  Gridded,
    + 60°N-60°S,
    + April 2015 to present
    + 4 Months (research / final run)

Weather Radar Data
...................
For very high spatial and temporal resolution data to be used in the prior engine weather radar systems are a very good source. So far, the usage of *RADOLAN's* precipitation data from 'Deutsche Wetterdienst' (DWD) is implemented, which is retrieved from a combination of weather radar data and *in-situ* precipitation measurements.

The utilized product provides hourly precipitation amounts with a resolution of 0.1 mm and a spatial resolution of 1 km². The data is available in near real time within 30 minutes for the area of Germany [#]_. This will possibly eventually be substituted by *EUMETSAT* *OPERA* data [#]_.



Data Sources and Retrieval
===========================
This section sums up the sources of the above mentioned data sets. Additionally, retrieval procedures are being outlined.

ESA-CCI Soil Moisture Data
---------------------------
The data used for the climatological prior is the ECV soil moisture data set generated by the ESA CCI. It can be downloaded from their project website: http://www.esa-soilmoisture-cci.org/node/145 . 

GPM Satellite Data
---------------------
The satellite data which is used for calculating the API will primary come from the Global Precipitation Measurement mission. Mirador web service [#]_ was used to download the data. This service provides a keyword search (e.g. *GPM_3IMERGHH*) and can restrict the results to timespan and location. 

Instructions from the Mirador web site are as follows:

* Save the list of URLs in one of the above links to your local workstation as myfile.dat
* If you haven't done so already, follow these instructions to register with Earthdata Login system and authorize the access to GES DISC data
* Create a ~/.netrc file pointing to urs.earthdata.nasa.gov and an empty ~/.urs_cookies file
* On your command line, using wget 1.18 ( or higher ):

  * wget --content-disposition --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --auth-no-challenge=on --keep-session-cookies -i myfile.dat


RADOLAN Weather Radar Data
--------------------------
The RADOLAN as currently used weather radar data is provided by DWD. The data is made available on their FTP-server which can be reached at ftp://ftp-cdc.dwd.de/pub/CDC/grids_germany/hourly/radolan/ . 



Pre-Processing
================

ESA-CCI Soil Moisture Data
------------------------------
ESA CCI soilmoisture data was aggregated to climatological values using `geoval module <https://github.com/pygeo/geoval>`_. The possibility to extract the *'intra-monthly'* standard deviation over time at the aggregated pixel was added to provide a measure of uncertainty. *Geoval* makes it as simple as:

.. code:: Python

   sm = GeoData('./data/OBS_ESACCI-SOILMOISTURE_sat_L3S-SSMV-COMBINED_T2Ms_sm_197801-201412_SUBSET.nc', 'sm', read=True)

   sm_climatology = sm.get_climatology(return_object=True)
   sm_climatology_stdev = sm.get_climatology_stdev(return_object=True)

   # Save data
   os.chdir('/path/to/data/CCI_SM/ESA_CCI_data')
   sm_climatology.save('CCI_SM_climatology_eur.nc')
   sm_climatology_stdev.save('CCI_SM_climatology_stdev_eur.nc')

Further pre-processing steps are subsetting, merging means and standard deviation files and inverting the latitudes of the climatology data.
A subset of the data for Europe may be provided to speed up extraction time. This could be easily created with *ncks*'s command line interface (CLI) via:

.. code::

  ncks -v 'sm' -d lat,34.5,62.5 -d lon,-11.0,27.0 infile.nc -O subset.nc

Soil moisture climatology and standard deviation maps are merged with *cdo*:

.. code::

    cdo merge CCI_SM_climatology.nc CCI_SM_climatology_stdev.nc CCI_SM_clim_all.nc


and latitudes may be inverted via:

.. code::

    cdo invertlat CCI_SM_climatology_eur_merged.nc CCI_SM_climatology_eur_merged_inv.nc


Satellite Data (GPM)
--------------------
The steps to pre-process GPM data after download are:

1. Conversion to NetCDF

This transformation utilizes the *ncl* tools and is initiated via ``ncl gpm_hdf2nc.ncl`` where *gpm_hdf2nc.ncl* is an adjusted, thus actually working version of the routine provided at https://www.ncl.ucar.edu/Applications/Scripts/gpm_hdf2nc.ncl . 

2. Altering meta-data

Here, the meta-data of the newly created NetCDF files is modified. This includes adjusting time information from filename if not present in NetCDF file dimensions vie *cdo settime* and *cdo setdate* and re-order latitudes and longitudes via *ncpdq*.
   
     .. code::

	for filename in files:
		print('processing file: {}'.format(filename))
		warnings = []
		try:
		    nc_f = Dataset(filename, 'r')
		    if 'time' not in nc_f.dimensions.keys():
			# print('No time dimension found.')
			pass
		    f = os.path.basename(filename)
		    # set date and time in Netcdfs
		    if 'BeginDate' in nc_f.ncattrs():
			fn_d = "{}{}_date".format(tmp, f)
			os.system('cdo setdate,{} {} {}'.format(getattr(nc_f,'BeginDate'), f, fn_d))

		    if 'BeginTime' in nc_f.ncattrs():
			fn_t = "{}_time".format(fn_d)
			os.system('cdo settime,{} {} {}'.format(getattr(nc_f,'BeginTime')[:-5], fn_d, fn_t))
			print('removing {}'.format(fn_d))
			os.system('rm {}'.format(fn_d))
			# Transpose lat lon
		    fn_T = "{}_T".format(fn_t)
		    os.system('ncpdq -a lat,lon {} {}'
			    .format(fn_t, fn_T))

		    print('removing {}'.format(fn_t))
		    os.system('rm {}'.format(fn_t))

		    new_name = fn_T.rsplit('.', 1)[0] + '_datetime_T.nc4'
		    print(new_name)
		    os.system('mv {} {}'.format(fn_T, new_name))
		    count += 1
		except IOError:
		    print('[WARNING]: could not read file {}'.format(filename))
		    warnings.append(filename)
	 

3. Merging data sets

The resulting data sets were merged via ``cdo mergetime``.

4. Subsetting

The data may optionally be subsetted via ``ncks -d lat,46.5,55.5 -d lon,4.,16. filename outname``. This depends on the final data storage setup.


Weather Radar Data
------------------
The data is downloaded in ASCII format with rows and columns representing the
1 km² pixels.
An accompanying document holding the coordinates of each cell is provided by the
DWD.

Reproject RADOLAN Data and Create Geotiff
...............................................
RADOLAN uses its own stereographic projection defined by the DWD (German Weather Service). In order to use it effortlessly in combination with other data sets it is beeing reprojected to WGS84.
This includes transforming RADOLAN ascii data sets to reprojected GeoTiffs using ``gdalwarp``:

  .. code-block:: bash

     # native projection ("RADOLAN-Projektion"):
     R=6370040
     R="+a=$R +b=$R"
     nat_proj="+proj=stere +lon_0=10.0 +lat_0=90.0 +lat_ts=60.0 $R +units=m"

     gdalwarp -co "TILED=YES" -co compress=lzw \
         -s_srs "$nat_proj" \
         -t_srs "EPSG:4326" \
         -r near \
         -overwrite \
         -of GTiff $1 $2

This creates GeoTiff files with the following metadata (e.g.):

  .. code-block:: bash

     gdalinfo RW_20170822-0050.tiff 
          Driver: GTiff/GeoTIFF
          Files: RW_20170822-0050.tiff
          Size is 1188, 692
          Coordinate System is:
          GEOGCS["WGS 84",
              DATUM["WGS_1984",
                  SPHEROID["WGS 84",6378137,298.257223563,
                      AUTHORITY["EPSG","7030"]],
                  AUTHORITY["EPSG","6326"]],
              PRIMEM["Greenwich",0],
              UNIT["degree",0.0174532925199433],
              AUTHORITY["EPSG","4326"]]
          Origin = (2.071482730288411,54.905034264548640)
          Pixel Size = (0.011493353798484,-0.011493353798484)
          Metadata:
            AREA_OR_POINT=Area
          Image Structure Metadata:
            COMPRESSION=LZW
            INTERLEAVE=BAND
          Corner Coordinates:
          Upper Left  (   2.0714827,  54.9050343) (  2d 4'17.34"E, 54d54'18.12"N)
          Lower Left  (   2.0714827,  46.9516334) (  2d 4'17.34"E, 46d57' 5.88"N)
          Upper Right (  15.7255870,  54.9050343) ( 15d43'32.11"E, 54d54'18.12"N)
          Lower Right (  15.7255870,  46.9516334) ( 15d43'32.11"E, 46d57' 5.88"N)
          Center      (   8.8985349,  50.9283339) (  8d53'54.73"E, 50d55'42.00"N)
          Band 1 Block=256x256 Type=Int32, ColorInterp=Gray
            NoData Value=-1

As ``AREA_OR_POINT=Area`` the coordinates denote the upper left pixel corner.

"PixelIsArea" Raster Space (from `maptools.org`_)::

     The "PixelIsArea" raster grid space R, which is the default, uses coordinates I and J, with (0,0)
     denoting the upper-left corner of the image, and increasing I to the right, increasing J down.
     The first pixel-value fills the square grid cell with the bounds:
     
        top-left = (0,0), bottom-right = (1,1)
     
     and so on; by extension this one-by-one grid cell is also referred to as a pixel.
     An N by M pixel image covers an are with the mathematically defined bounds (0,0),(N,M).
     
          (0,0)
           +---+---+-> I
           | * | * |
           +---+---+        Standard (PixelIsArea) TIFF Raster space R,
           | (1,1)  (2,1)      showing the areas (*) of several pixels.
           |
           J


Create NetCDF files from RADOLAN data
................................................
With many (> 100k) hourly RADOLAN data sets from different folders, the creation of NetCDF files was accomplished with a python script walking directories and creating single NetCDF files from the previously generated GeoTiffs with *gdal* and *netCDF4* packages. Furthermore, the package joblib_ was used for parallelization:

  .. code-block:: python

                  # Loop over years in parallelization
                  # Create argument instances to process:
                  arg_instances = [[str(year), "{:02d}".format(month)]
                  for year in years for month in range(1,13)]

                  # Perform parrallel computation of NetCDF generation
                  Parallel(n_jobs=-1, verbose=100, backend="multiprocessing")(
                  delayed(create_NetCDFs)(*i) for i in arg_instances)

Concatenate monthly and yearly NetCDF files
............................................
Use ``ncrcat`` to concatenate monthly NetCDF data to yearly data.

  .. code-block:: python

     def cat_netcdfs(year):
         os.system('ncrcat -O -h radolan_time_series_{}_*.nc  '
                   'radolan_time_series_{}.nc'.format(year, year))

The function was also passed to a parallelization module (``joblib``) to speed things up.



References
------------
.. [#] http://www.esa-soilmoisture-cci.org/node/93
.. [#] https://pmm.nasa.gov/data-access/downloads/gpm
.. [#] http://www.dwd.de/DE/leistungen/radolan/radolan.html
.. [#] http://eumetnet.eu/activities/observations-programme/current-activities/opera/
.. [#] https://mirador.gsfc.nasa.gov/cgi-bin/mirador/homepageAlt.pl?keyword=GPM_3IMERGHH
.. _production: https://www.dwd.de/DE/leistungen/radolan/radolan_info/radolan_informationen.html

.. _stackexchange: https://gis.stackexchange.com/questions/70458/convert-timeseries-stack-of-gtiff-raster-to-single-netcdf
.. _joblib: https://pythonhosted.org/joblib/generated/joblib.Parallel.html
.. _maptools.org:  http://geotiff.maptools.org/spec/geotiff2.5.html
